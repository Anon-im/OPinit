// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opinit/ophost/v1/types.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of ophost parameters.
type Params struct {
	// The amount to be paid by l2 creator.
	RegistrationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=registration_fee,json=registrationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"registration_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_29cadbd84ee898dd, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// BridgeConfig defines the set of bridge config.
type BridgeConfig struct {
	// The address of the challenger.
	Challenger string `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty"`
	// The address of the proposer.
	Proposer string `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// The l2 block number interval at which checkpoints must be submitted.
	SubmissionInterval uint64 `protobuf:"varint,3,opt,name=submission_interval,json=submissionInterval,proto3" json:"submission_interval,omitempty"`
	// The minium time duration that must elapse before a withdrawal can be finalized.
	FinalizationPeriod time.Duration `protobuf:"bytes,4,opt,name=finalization_period,json=finalizationPeriod,proto3,stdduration" json:"finalization_period,omitempty"`
	// The block number of the first l2 block recorded.
	StartingBlockNumber uint64 `protobuf:"varint,5,opt,name=starting_block_number,json=startingBlockNumber,proto3" json:"starting_block_number,omitempty"`
	// Normally it is IBC channelID for permissioned IBC relayer.
	Metadata []byte `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *BridgeConfig) Reset()         { *m = BridgeConfig{} }
func (m *BridgeConfig) String() string { return proto.CompactTextString(m) }
func (*BridgeConfig) ProtoMessage()    {}
func (*BridgeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_29cadbd84ee898dd, []int{1}
}
func (m *BridgeConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeConfig.Merge(m, src)
}
func (m *BridgeConfig) XXX_Size() int {
	return m.Size()
}
func (m *BridgeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeConfig proto.InternalMessageInfo

// TokenPair defines l1 and l2 token pair
type TokenPair struct {
	L1Denom string `protobuf:"bytes,1,opt,name=l1_denom,json=l1Denom,proto3" json:"l1_denom,omitempty"`
	L2Denom string `protobuf:"bytes,2,opt,name=l2_denom,json=l2Denom,proto3" json:"l2_denom,omitempty"`
}

func (m *TokenPair) Reset()         { *m = TokenPair{} }
func (m *TokenPair) String() string { return proto.CompactTextString(m) }
func (*TokenPair) ProtoMessage()    {}
func (*TokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_29cadbd84ee898dd, []int{2}
}
func (m *TokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenPair.Merge(m, src)
}
func (m *TokenPair) XXX_Size() int {
	return m.Size()
}
func (m *TokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_TokenPair proto.InternalMessageInfo

// Output is a l2 block submitted by proposer.
type Output struct {
	// Hash of the l2 output.
	OutputRoot []byte `protobuf:"bytes,1,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty"`
	// Timestamp of the l1 block that the output root was submitted in.
	L1BlockTime time.Time `protobuf:"bytes,2,opt,name=l1_block_time,json=l1BlockTime,proto3,stdtime" json:"l1_block_time"`
	// Timestamp of the l2 block that the output root was submitted in.
	L2BlockNumber uint64 `protobuf:"varint,3,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_29cadbd84ee898dd, []int{3}
}
func (m *Output) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Output.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return m.Size()
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "opinit.ophost.v1.Params")
	proto.RegisterType((*BridgeConfig)(nil), "opinit.ophost.v1.BridgeConfig")
	proto.RegisterType((*TokenPair)(nil), "opinit.ophost.v1.TokenPair")
	proto.RegisterType((*Output)(nil), "opinit.ophost.v1.Output")
}

func init() { proto.RegisterFile("opinit/ophost/v1/types.proto", fileDescriptor_29cadbd84ee898dd) }

var fileDescriptor_29cadbd84ee898dd = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x3f, 0x4f, 0xdb, 0x4e,
	0x18, 0xc7, 0x73, 0xc0, 0x2f, 0x3f, 0xb8, 0x10, 0x41, 0x0d, 0x95, 0x4c, 0xd4, 0xda, 0x51, 0x86,
	0x2a, 0x42, 0x60, 0xcb, 0x69, 0x2b, 0x55, 0xdd, 0x08, 0xa8, 0x52, 0x87, 0x42, 0x94, 0x32, 0x75,
	0x89, 0xce, 0xf1, 0xc5, 0x9c, 0xb0, 0xfd, 0x58, 0x77, 0xe7, 0xa8, 0xd0, 0x77, 0xd0, 0x89, 0x91,
	0x91, 0x6e, 0xa8, 0x13, 0x43, 0x5f, 0x04, 0x23, 0xea, 0xd4, 0x09, 0xda, 0x30, 0x50, 0xf5, 0x2d,
	0x74, 0xa9, 0x7c, 0xbe, 0xd0, 0xf4, 0x8f, 0xd4, 0x25, 0xf1, 0x73, 0x9f, 0xef, 0xf9, 0xbe, 0xf9,
	0x3e, 0x4f, 0x0e, 0xdf, 0x83, 0x94, 0x25, 0x4c, 0xba, 0x90, 0xee, 0x81, 0x90, 0xee, 0xd0, 0x73,
	0xe5, 0x41, 0x4a, 0x85, 0x93, 0x72, 0x90, 0x60, 0x2c, 0x16, 0xd4, 0x29, 0xa8, 0x33, 0xf4, 0x6a,
	0x77, 0x48, 0xcc, 0x12, 0x70, 0xd5, 0x67, 0x21, 0xaa, 0x59, 0x7d, 0x10, 0x31, 0x08, 0xd7, 0x27,
	0x82, 0xba, 0x43, 0xcf, 0xa7, 0x92, 0x78, 0x6e, 0x1f, 0x58, 0xa2, 0xf9, 0x4a, 0xc1, 0x7b, 0xaa,
	0x72, 0x8b, 0x42, 0xa3, 0xe5, 0x10, 0x42, 0x28, 0xd6, 0xf3, 0x27, 0xbd, 0x6a, 0x87, 0x00, 0x61,
	0x44, 0x5d, 0x55, 0xf9, 0xd9, 0xc0, 0x95, 0x2c, 0xa6, 0x42, 0x92, 0x38, 0x1d, 0x9f, 0xf8, 0xbb,
	0x20, 0xc8, 0x38, 0x91, 0x0c, 0xf4, 0x89, 0x8d, 0x77, 0x08, 0x97, 0x3b, 0x84, 0x93, 0x58, 0x18,
	0x6f, 0xf0, 0x22, 0xa7, 0x21, 0x13, 0xb2, 0x10, 0xf4, 0x06, 0x94, 0x9a, 0xa8, 0x3e, 0xdd, 0xac,
	0xb4, 0x56, 0x1c, 0x6d, 0x25, 0xf7, 0xed, 0x68, 0xdf, 0xce, 0x26, 0xb0, 0xa4, 0xfd, 0xf8, 0xfc,
	0xd2, 0x2e, 0xbd, 0xbf, 0xb2, 0x9b, 0x21, 0x93, 0x7b, 0x99, 0xef, 0xf4, 0x21, 0xd6, 0xbe, 0xf5,
	0xd7, 0xba, 0x08, 0xf6, 0x75, 0x50, 0xf9, 0x06, 0x71, 0x7a, 0x73, 0xb6, 0x8a, 0xba, 0x0b, 0x93,
	0x27, 0x3d, 0xa3, 0xf4, 0x69, 0xed, 0xf8, 0xc4, 0x2e, 0x7d, 0x3d, 0xb1, 0xd1, 0xdb, 0x9b, 0xb3,
	0xd5, 0xaa, 0x8e, 0xb8, 0x30, 0xd6, 0xf8, 0x3e, 0x85, 0xe7, 0xdb, 0x9c, 0x05, 0x21, 0xdd, 0x84,
	0x64, 0xc0, 0x42, 0xe3, 0x09, 0xc6, 0xfd, 0x3d, 0x12, 0x45, 0x34, 0x09, 0x29, 0x37, 0x51, 0x1d,
	0x35, 0xe7, 0xda, 0xe6, 0xc7, 0x0f, 0xeb, 0xcb, 0xda, 0xe6, 0x46, 0x10, 0x70, 0x2a, 0xc4, 0x4b,
	0xc9, 0x59, 0x12, 0x76, 0x27, 0xb4, 0xc6, 0x23, 0x3c, 0x9b, 0x72, 0x48, 0x41, 0x50, 0x6e, 0x4e,
	0xfd, 0x63, 0xdf, 0xad, 0xd2, 0x70, 0xf1, 0x92, 0xc8, 0xfc, 0x98, 0x09, 0x91, 0xe7, 0xc2, 0x12,
	0x49, 0xf9, 0x90, 0x44, 0xe6, 0x74, 0x1d, 0x35, 0x67, 0xba, 0xc6, 0x4f, 0xf4, 0x5c, 0x13, 0xe3,
	0x10, 0x2f, 0x0d, 0x58, 0x42, 0x22, 0x76, 0x58, 0x44, 0x99, 0x52, 0xce, 0x20, 0x30, 0x67, 0xea,
	0x48, 0xa5, 0x59, 0xf4, 0xc4, 0x19, 0xf7, 0xc4, 0xd9, 0xd2, 0x3d, 0x69, 0x3b, 0x79, 0x9a, 0xdf,
	0x2e, 0xed, 0xfb, 0x7f, 0xd9, 0xbd, 0x06, 0x31, 0x93, 0x34, 0x4e, 0xe5, 0xc1, 0xf1, 0x95, 0x8d,
	0x8a, 0x18, 0x8d, 0x49, 0x5d, 0x47, 0xc9, 0x8c, 0x16, 0xbe, 0x2b, 0x24, 0xe1, 0x92, 0x25, 0x61,
	0xcf, 0x8f, 0xa0, 0xbf, 0xdf, 0x4b, 0xb2, 0xd8, 0xa7, 0xdc, 0xfc, 0x4f, 0xd9, 0x5d, 0x1a, 0xc3,
	0x76, 0xce, 0xb6, 0x15, 0x32, 0x6a, 0x78, 0x36, 0xa6, 0x92, 0x04, 0x44, 0x12, 0xb3, 0x5c, 0x47,
	0xcd, 0xf9, 0xee, 0x6d, 0xdd, 0xd8, 0xc0, 0x73, 0xbb, 0xb0, 0x4f, 0x93, 0x0e, 0x61, 0xdc, 0x58,
	0xc1, 0xb3, 0x91, 0xd7, 0x0b, 0x68, 0x02, 0x71, 0x91, 0x7b, 0xf7, 0xff, 0xc8, 0xdb, 0xca, 0x4b,
	0x85, 0x5a, 0x1a, 0x4d, 0x69, 0xd4, 0x52, 0xa8, 0x71, 0x82, 0x70, 0x79, 0x27, 0x93, 0x69, 0x26,
	0x0d, 0x1b, 0x57, 0x40, 0x3d, 0xf5, 0x38, 0x80, 0x54, 0xef, 0x98, 0xef, 0xe2, 0x62, 0xa9, 0x0b,
	0x20, 0x8d, 0x17, 0xb8, 0x1a, 0x79, 0xda, 0x78, 0x3e, 0xcc, 0xea, 0x5d, 0x95, 0x56, 0xed, 0x8f,
	0xd0, 0x76, 0xc7, 0x93, 0xde, 0xae, 0xe6, 0xa9, 0x1d, 0xdd, 0x86, 0x52, 0x89, 0x3c, 0xf5, 0xdb,
	0x72, 0x81, 0xf1, 0x00, 0x2f, 0x44, 0xad, 0x5f, 0x73, 0x28, 0xda, 0x56, 0x8d, 0x5a, 0x13, 0x09,
	0xb4, 0xb7, 0xcf, 0xbf, 0x58, 0xa5, 0xd3, 0x91, 0x85, 0xce, 0x47, 0x16, 0xba, 0x18, 0x59, 0xe8,
	0xf3, 0xc8, 0x42, 0x47, 0xd7, 0x56, 0xe9, 0xe2, 0xda, 0x2a, 0x7d, 0xba, 0xb6, 0x4a, 0xaf, 0xd6,
	0x26, 0x26, 0x3c, 0xff, 0xa7, 0x33, 0xb2, 0x1e, 0x11, 0x5f, 0xb8, 0x3b, 0x1d, 0x75, 0x2b, 0xbc,
	0x1e, 0xdf, 0x0b, 0x6a, 0xd6, 0xfd, 0xb2, 0xf2, 0xf9, 0xf0, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc8, 0xc4, 0xf2, 0x6c, 0x35, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RegistrationFee) != len(that1.RegistrationFee) {
		return false
	}
	for i := range this.RegistrationFee {
		if !this.RegistrationFee[i].Equal(&that1.RegistrationFee[i]) {
			return false
		}
	}
	return true
}
func (this *BridgeConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeConfig)
	if !ok {
		that2, ok := that.(BridgeConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Challenger != that1.Challenger {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.SubmissionInterval != that1.SubmissionInterval {
		return false
	}
	if this.FinalizationPeriod != that1.FinalizationPeriod {
		return false
	}
	if this.StartingBlockNumber != that1.StartingBlockNumber {
		return false
	}
	if !bytes.Equal(this.Metadata, that1.Metadata) {
		return false
	}
	return true
}
func (this *TokenPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenPair)
	if !ok {
		that2, ok := that.(TokenPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.L1Denom != that1.L1Denom {
		return false
	}
	if this.L2Denom != that1.L2Denom {
		return false
	}
	return true
}
func (this *Output) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Output)
	if !ok {
		that2, ok := that.(Output)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.OutputRoot, that1.OutputRoot) {
		return false
	}
	if !this.L1BlockTime.Equal(that1.L1BlockTime) {
		return false
	}
	if this.L2BlockNumber != that1.L2BlockNumber {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegistrationFee) > 0 {
		for iNdEx := len(m.RegistrationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RegistrationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BridgeConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x32
	}
	if m.StartingBlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.StartingBlockNumber))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.FinalizationPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.FinalizationPeriod):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.SubmissionInterval != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SubmissionInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L2Denom) > 0 {
		i -= len(m.L2Denom)
		copy(dAtA[i:], m.L2Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.L2Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.L1Denom) > 0 {
		i -= len(m.L1Denom)
		copy(dAtA[i:], m.L1Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.L1Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Output) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Output) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Output) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x18
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.L1BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.L1BlockTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.OutputRoot) > 0 {
		i -= len(m.OutputRoot)
		copy(dAtA[i:], m.OutputRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OutputRoot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegistrationFee) > 0 {
		for _, e := range m.RegistrationFee {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *BridgeConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SubmissionInterval != 0 {
		n += 1 + sovTypes(uint64(m.SubmissionInterval))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.FinalizationPeriod)
	n += 1 + l + sovTypes(uint64(l))
	if m.StartingBlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.StartingBlockNumber))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *TokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.L1Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.L2Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Output) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutputRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.L1BlockTime)
	n += 1 + l + sovTypes(uint64(l))
	if m.L2BlockNumber != 0 {
		n += 1 + sovTypes(uint64(m.L2BlockNumber))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistrationFee = append(m.RegistrationFee, types.Coin{})
			if err := m.RegistrationFee[len(m.RegistrationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionInterval", wireType)
			}
			m.SubmissionInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmissionInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.FinalizationPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingBlockNumber", wireType)
			}
			m.StartingBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Output) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Output: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Output: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputRoot = append(m.OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputRoot == nil {
				m.OutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.L1BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
