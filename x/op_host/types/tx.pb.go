// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: op_init/op_host/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRecordBatch is no_op message, which is only for tx indexing.
type MsgRecordBatch struct {
	Submitter  string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty"`
	BridgeId   uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BatchBytes []byte `protobuf:"bytes,3,opt,name=batch_bytes,json=batchBytes,proto3" json:"batch_bytes,omitempty"`
}

func (m *MsgRecordBatch) Reset()         { *m = MsgRecordBatch{} }
func (m *MsgRecordBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBatch) ProtoMessage()    {}
func (*MsgRecordBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{0}
}
func (m *MsgRecordBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBatch.Merge(m, src)
}
func (m *MsgRecordBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBatch proto.InternalMessageInfo

// MsgRecordBatchResponse returns MsgRecordBatch message result data
type MsgRecordBatchResponse struct {
}

func (m *MsgRecordBatchResponse) Reset()         { *m = MsgRecordBatchResponse{} }
func (m *MsgRecordBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBatchResponse) ProtoMessage()    {}
func (*MsgRecordBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{1}
}
func (m *MsgRecordBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBatchResponse.Merge(m, src)
}
func (m *MsgRecordBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBatchResponse proto.InternalMessageInfo

// MsgCreateBridge is a message to register a new bridge with
// new bridge id.
type MsgCreateBridge struct {
	Creator string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Config  BridgeConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config"`
}

func (m *MsgCreateBridge) Reset()         { *m = MsgCreateBridge{} }
func (m *MsgCreateBridge) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBridge) ProtoMessage()    {}
func (*MsgCreateBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{2}
}
func (m *MsgCreateBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBridge.Merge(m, src)
}
func (m *MsgCreateBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBridge proto.InternalMessageInfo

// MsgCreateBridgeResponse returns MsgCreateBridge message
// result data
type MsgCreateBridgeResponse struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (m *MsgCreateBridgeResponse) Reset()         { *m = MsgCreateBridgeResponse{} }
func (m *MsgCreateBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBridgeResponse) ProtoMessage()    {}
func (*MsgCreateBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{3}
}
func (m *MsgCreateBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBridgeResponse.Merge(m, src)
}
func (m *MsgCreateBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBridgeResponse proto.InternalMessageInfo

// MsgProposeOutput is a message to submit l2 block proposal.
type MsgProposeOutput struct {
	Proposer    string    `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	BridgeId    uint64    `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputRoot  []byte    `protobuf:"bytes,3,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty"`
	L2BlockTime time.Time `protobuf:"bytes,4,opt,name=l2_block_time,json=l2BlockTime,proto3,stdtime" json:"l2_block_time"`
}

func (m *MsgProposeOutput) Reset()         { *m = MsgProposeOutput{} }
func (m *MsgProposeOutput) String() string { return proto.CompactTextString(m) }
func (*MsgProposeOutput) ProtoMessage()    {}
func (*MsgProposeOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{4}
}
func (m *MsgProposeOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeOutput.Merge(m, src)
}
func (m *MsgProposeOutput) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeOutput proto.InternalMessageInfo

// MsgProposeOutputResponse returns deposit result data
type MsgProposeOutputResponse struct {
}

func (m *MsgProposeOutputResponse) Reset()         { *m = MsgProposeOutputResponse{} }
func (m *MsgProposeOutputResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeOutputResponse) ProtoMessage()    {}
func (*MsgProposeOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{5}
}
func (m *MsgProposeOutputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeOutputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeOutputResponse.Merge(m, src)
}
func (m *MsgProposeOutputResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeOutputResponse proto.InternalMessageInfo

// MsgDeleteOutput is a message to delete unfinalized l2 output proposal.
type MsgDeleteOutput struct {
	Challenger  string `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty" yaml:"challenger"`
	BridgeId    uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputIndex uint64 `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (m *MsgDeleteOutput) Reset()         { *m = MsgDeleteOutput{} }
func (m *MsgDeleteOutput) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOutput) ProtoMessage()    {}
func (*MsgDeleteOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{6}
}
func (m *MsgDeleteOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOutput.Merge(m, src)
}
func (m *MsgDeleteOutput) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOutput proto.InternalMessageInfo

// MsgDeleteOutputResponse returns a message handle result.
type MsgDeleteOutputResponse struct {
}

func (m *MsgDeleteOutputResponse) Reset()         { *m = MsgDeleteOutputResponse{} }
func (m *MsgDeleteOutputResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOutputResponse) ProtoMessage()    {}
func (*MsgDeleteOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{7}
}
func (m *MsgDeleteOutputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOutputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOutputResponse.Merge(m, src)
}
func (m *MsgDeleteOutputResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOutputResponse proto.InternalMessageInfo

// MsgDeposit defines a SDK message for adding a new validator.
type MsgDeposit struct {
	Sender   string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	BridgeId uint64                                   `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	To       string                                   `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	Data     []byte                                   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgDeposit) Reset()         { *m = MsgDeposit{} }
func (m *MsgDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDeposit) ProtoMessage()    {}
func (*MsgDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{8}
}
func (m *MsgDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeposit.Merge(m, src)
}
func (m *MsgDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeposit proto.InternalMessageInfo

// MsgDepositResponse returns a message handle result.
type MsgDepositResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgDepositResponse) Reset()         { *m = MsgDepositResponse{} }
func (m *MsgDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositResponse) ProtoMessage()    {}
func (*MsgDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{9}
}
func (m *MsgDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositResponse.Merge(m, src)
}
func (m *MsgDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositResponse proto.InternalMessageInfo

// MsgClaim is a message to remove a validator from designated list
type MsgClaim struct {
	BridgeId         uint64       `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputIndex      uint64       `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	WithdrawalProofs [][]byte     `protobuf:"bytes,4,rep,name=withdrawal_proofs,json=withdrawalProofs,proto3" json:"withdrawal_proofs,omitempty"`
	Sender           string       `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	Sequence         uint64       `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Receiver         string       `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty" yaml:"receiver"`
	Amount           []types.Coin `protobuf:"bytes,7,rep,name=amount,proto3" json:"amount" yaml:"amount"`
	Version          []byte       `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	StateRoot        []byte       `protobuf:"bytes,9,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	StorageRoot      []byte       `protobuf:"bytes,10,opt,name=storage_root,json=storageRoot,proto3" json:"storage_root,omitempty"`
	LatestBlockHash  []byte       `protobuf:"bytes,11,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
}

func (m *MsgClaim) Reset()         { *m = MsgClaim{} }
func (m *MsgClaim) String() string { return proto.CompactTextString(m) }
func (*MsgClaim) ProtoMessage()    {}
func (*MsgClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{10}
}
func (m *MsgClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaim.Merge(m, src)
}
func (m *MsgClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaim proto.InternalMessageInfo

// MsgClaimResponse returns a message handle result.
type MsgClaimResponse struct {
}

func (m *MsgClaimResponse) Reset()         { *m = MsgClaimResponse{} }
func (m *MsgClaimResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimResponse) ProtoMessage()    {}
func (*MsgClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{11}
}
func (m *MsgClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimResponse.Merge(m, src)
}
func (m *MsgClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimResponse proto.InternalMessageInfo

// MsgChallenge is a message to challenage
type MsgChallenge struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId  uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	// the hash of balance tree for escaping.
	BalanceTreeRoot []byte `protobuf:"bytes,3,opt,name=balance_tree_root,json=balanceTreeRoot,proto3" json:"balance_tree_root,omitempty"`
}

func (m *MsgChallenge) Reset()         { *m = MsgChallenge{} }
func (m *MsgChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgChallenge) ProtoMessage()    {}
func (*MsgChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{12}
}
func (m *MsgChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallenge.Merge(m, src)
}
func (m *MsgChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallenge proto.InternalMessageInfo

// MsgChallengeResponse returns a message handle result.
type MsgChallengeResponse struct {
}

func (m *MsgChallengeResponse) Reset()         { *m = MsgChallengeResponse{} }
func (m *MsgChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChallengeResponse) ProtoMessage()    {}
func (*MsgChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{13}
}
func (m *MsgChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChallengeResponse.Merge(m, src)
}
func (m *MsgChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChallengeResponse proto.InternalMessageInfo

// MsgUpdateParams is a message to update parameters
type MsgUpdateParams struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// params are the arbitrary parameters to be updated.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{14}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse returns a message handle result.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2d2ca120cd051cb, []int{15}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecordBatch)(nil), "op_init.op_host.v1.MsgRecordBatch")
	proto.RegisterType((*MsgRecordBatchResponse)(nil), "op_init.op_host.v1.MsgRecordBatchResponse")
	proto.RegisterType((*MsgCreateBridge)(nil), "op_init.op_host.v1.MsgCreateBridge")
	proto.RegisterType((*MsgCreateBridgeResponse)(nil), "op_init.op_host.v1.MsgCreateBridgeResponse")
	proto.RegisterType((*MsgProposeOutput)(nil), "op_init.op_host.v1.MsgProposeOutput")
	proto.RegisterType((*MsgProposeOutputResponse)(nil), "op_init.op_host.v1.MsgProposeOutputResponse")
	proto.RegisterType((*MsgDeleteOutput)(nil), "op_init.op_host.v1.MsgDeleteOutput")
	proto.RegisterType((*MsgDeleteOutputResponse)(nil), "op_init.op_host.v1.MsgDeleteOutputResponse")
	proto.RegisterType((*MsgDeposit)(nil), "op_init.op_host.v1.MsgDeposit")
	proto.RegisterType((*MsgDepositResponse)(nil), "op_init.op_host.v1.MsgDepositResponse")
	proto.RegisterType((*MsgClaim)(nil), "op_init.op_host.v1.MsgClaim")
	proto.RegisterType((*MsgClaimResponse)(nil), "op_init.op_host.v1.MsgClaimResponse")
	proto.RegisterType((*MsgChallenge)(nil), "op_init.op_host.v1.MsgChallenge")
	proto.RegisterType((*MsgChallengeResponse)(nil), "op_init.op_host.v1.MsgChallengeResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "op_init.op_host.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "op_init.op_host.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("op_init/op_host/v1/tx.proto", fileDescriptor_a2d2ca120cd051cb) }

var fileDescriptor_a2d2ca120cd051cb = []byte{
	// 1274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xc1, 0x6f, 0xdb, 0x54,
	0x18, 0x8f, 0xbb, 0x34, 0x6d, 0x5e, 0x5a, 0xda, 0x5a, 0xd5, 0xe6, 0x79, 0x2c, 0xc9, 0xcc, 0x04,
	0x59, 0xb6, 0x3a, 0x34, 0x48, 0x3b, 0xe4, 0xb6, 0x14, 0x01, 0x63, 0x8a, 0x56, 0xc2, 0x10, 0x12,
	0x12, 0x0a, 0xcf, 0xf6, 0x9b, 0x63, 0xcd, 0xf6, 0x33, 0x7e, 0x2f, 0x5d, 0x73, 0x43, 0x9c, 0x10,
	0xa7, 0x1d, 0xf8, 0x03, 0x26, 0x71, 0x41, 0x9c, 0x8a, 0xb4, 0x2b, 0xf7, 0x1e, 0x40, 0x9a, 0x38,
	0x71, 0x40, 0x1d, 0xb4, 0x87, 0x72, 0x43, 0xea, 0x5f, 0x80, 0xde, 0xf3, 0xb3, 0x63, 0x87, 0x38,
	0x9d, 0xc4, 0x2e, 0x5b, 0xdf, 0xf7, 0xfd, 0xbe, 0xcf, 0xdf, 0xef, 0xe7, 0xef, 0x7d, 0x9f, 0x03,
	0xae, 0xe0, 0x60, 0xe0, 0xf8, 0x0e, 0x6d, 0xe1, 0x60, 0x30, 0xc4, 0x84, 0xb6, 0xf6, 0xb6, 0x5b,
	0x74, 0x5f, 0x0f, 0x42, 0x4c, 0xb1, 0x2c, 0x0b, 0xa7, 0x2e, 0x9c, 0xfa, 0xde, 0xb6, 0xba, 0x01,
	0x3d, 0xc7, 0xc7, 0x2d, 0xfe, 0x6f, 0x04, 0x53, 0xab, 0x26, 0x26, 0x1e, 0x26, 0x2d, 0x03, 0x12,
	0xd4, 0xda, 0xdb, 0x36, 0x10, 0x85, 0xdb, 0x2d, 0x13, 0x3b, 0xbe, 0xf0, 0x5f, 0x12, 0x7e, 0x8f,
	0xd8, 0x2c, 0xbd, 0x47, 0x6c, 0xe1, 0xb8, 0x1c, 0x39, 0x06, 0xfc, 0xd4, 0x8a, 0x0e, 0xc2, 0xb5,
	0x69, 0x63, 0x1b, 0x47, 0x76, 0xf6, 0x57, 0x1c, 0x60, 0x63, 0x6c, 0xbb, 0xa8, 0xc5, 0x4f, 0xc6,
	0xe8, 0x61, 0x0b, 0xfa, 0x63, 0xe1, 0xaa, 0x4d, 0xbb, 0xa8, 0xe3, 0x21, 0x42, 0xa1, 0x17, 0xc4,
	0x55, 0xce, 0x62, 0x3a, 0x0e, 0x90, 0x78, 0xa2, 0xf6, 0x93, 0x04, 0x5e, 0xeb, 0x11, 0xbb, 0x8f,
	0x4c, 0x1c, 0x5a, 0x5d, 0x48, 0xcd, 0xa1, 0x7c, 0x1b, 0x94, 0xc9, 0xc8, 0xf0, 0x1c, 0x4a, 0x51,
	0xa8, 0x48, 0x75, 0xa9, 0x51, 0xee, 0x2a, 0xbf, 0x3d, 0xdb, 0xda, 0x14, 0x95, 0xde, 0xb1, 0xac,
	0x10, 0x11, 0xf2, 0x31, 0x0d, 0x1d, 0xdf, 0xee, 0x4f, 0xa0, 0xf2, 0x15, 0x50, 0x36, 0x42, 0xc7,
	0xb2, 0xd1, 0xc0, 0xb1, 0x94, 0x85, 0xba, 0xd4, 0x28, 0xf6, 0x97, 0x23, 0xc3, 0x5d, 0x4b, 0xae,
	0x81, 0x8a, 0xc1, 0xb2, 0x0f, 0x8c, 0x31, 0x45, 0x44, 0xb9, 0x50, 0x97, 0x1a, 0x2b, 0x7d, 0xc0,
	0x4d, 0x5d, 0x66, 0xe9, 0xdc, 0xf8, 0xfa, 0xf4, 0xa0, 0x39, 0xc9, 0xf6, 0xed, 0xe9, 0x41, 0xf3,
	0x62, 0x5c, 0x73, 0xb6, 0x40, 0x4d, 0x01, 0x17, 0xb3, 0x96, 0x3e, 0x22, 0x01, 0xf6, 0x09, 0xd2,
	0x9e, 0x49, 0x60, 0xad, 0x47, 0xec, 0x9d, 0x10, 0x41, 0x8a, 0xba, 0xfc, 0xd9, 0x72, 0x1b, 0x2c,
	0x99, 0xec, 0x8c, 0xcf, 0x27, 0x13, 0x03, 0xe5, 0x1d, 0x50, 0x32, 0xb1, 0xff, 0xd0, 0xb1, 0x39,
	0x8f, 0x4a, 0xbb, 0xae, 0xff, 0xb7, 0x27, 0xf4, 0x28, 0xff, 0x0e, 0xc7, 0x75, 0xcb, 0x87, 0x47,
	0xb5, 0xc2, 0x0f, 0xa7, 0x07, 0x4d, 0xa9, 0x2f, 0x42, 0x3b, 0x0d, 0xc6, 0x28, 0x4e, 0xc9, 0xf8,
	0x5c, 0x4a, 0xf1, 0x49, 0x97, 0xa8, 0xdd, 0x06, 0x97, 0xa6, 0x4c, 0x31, 0xa3, 0xac, 0xa8, 0x52,
	0x56, 0x54, 0xed, 0xbb, 0x05, 0xb0, 0xde, 0x23, 0xf6, 0x6e, 0x88, 0x03, 0x4c, 0xd0, 0xfd, 0x11,
	0x0d, 0x46, 0x54, 0x7e, 0x1f, 0x2c, 0x07, 0x91, 0x21, 0x26, 0x7c, 0xf3, 0xec, 0xa8, 0xb6, 0x36,
	0x86, 0x9e, 0xdb, 0xd1, 0x62, 0x8f, 0x96, 0xab, 0x41, 0x12, 0x7c, 0xee, 0xfb, 0xc4, 0xfc, 0x79,
	0x83, 0x10, 0x63, 0x1a, 0xbf, 0xcf, 0xc8, 0xd4, 0xc7, 0x98, 0xca, 0x3d, 0xb0, 0xea, 0xb6, 0x07,
	0x86, 0x8b, 0xcd, 0x47, 0x03, 0xd6, 0x94, 0x4a, 0x91, 0x2b, 0xa9, 0xea, 0x51, 0xc7, 0xea, 0x71,
	0xc7, 0xea, 0x0f, 0xe2, 0x8e, 0xed, 0xae, 0x32, 0x0d, 0x9f, 0xbc, 0xa8, 0x49, 0x91, 0x8e, 0x15,
	0xb7, 0xdd, 0x65, 0xe1, 0x0c, 0xd0, 0x69, 0x32, 0x31, 0x93, 0xda, 0x98, 0x9a, 0x4a, 0x4a, 0xcd,
	0x8c, 0x02, 0x9a, 0x0a, 0x94, 0x69, 0x5b, 0xd2, 0x21, 0xbf, 0x46, 0x1d, 0xf2, 0x2e, 0x72, 0x11,
	0x8d, 0x15, 0xeb, 0x01, 0x60, 0x0e, 0xa1, 0xeb, 0x22, 0xdf, 0x4e, 0x34, 0xdb, 0x3a, 0x3b, 0xaa,
	0x6d, 0x44, 0x9a, 0x4d, 0x7c, 0xf9, 0xaa, 0xa5, 0x12, 0xcc, 0xd7, 0xed, 0x1a, 0x58, 0x11, 0xba,
	0x39, 0xbe, 0x85, 0xf6, 0xb9, 0x70, 0xc5, 0xbe, 0xd0, 0xf2, 0x2e, 0x33, 0x75, 0x6e, 0x32, 0xaa,
	0xa9, 0x84, 0xd3, 0xad, 0x93, 0xae, 0x5d, 0xbb, 0xcc, 0x5b, 0x27, 0x6d, 0x4a, 0xa8, 0xfe, 0xb1,
	0x00, 0x00, 0xf7, 0x05, 0x98, 0x38, 0x54, 0xbe, 0x03, 0x4a, 0x04, 0xf9, 0x56, 0xc2, 0xf0, 0xc6,
	0xd9, 0x51, 0x6d, 0x35, 0x62, 0x18, 0xd9, 0xf3, 0xd9, 0x89, 0xc0, 0xf9, 0xcc, 0x1a, 0x60, 0x81,
	0x62, 0xce, 0x67, 0xde, 0x15, 0x5b, 0xa0, 0x58, 0x1e, 0x83, 0x12, 0xf4, 0xf0, 0xc8, 0xa7, 0x4a,
	0xb1, 0x7e, 0xa1, 0x51, 0x69, 0x5f, 0xd6, 0x05, 0x94, 0x8d, 0x52, 0x5d, 0x8c, 0x52, 0x7d, 0x07,
	0x3b, 0x7e, 0xf7, 0x3d, 0xd6, 0x12, 0x93, 0x42, 0xa3, 0x30, 0xed, 0xc7, 0x17, 0xb5, 0x86, 0xed,
	0xd0, 0xe1, 0xc8, 0xd0, 0x4d, 0xec, 0x89, 0x11, 0x2a, 0xfe, 0xdb, 0x22, 0xd6, 0x23, 0x31, 0xe1,
	0x58, 0x06, 0x22, 0xee, 0x64, 0x14, 0x29, 0x5f, 0x05, 0x45, 0x0b, 0x52, 0xa8, 0x2c, 0xb2, 0x7e,
	0xe5, 0x97, 0x96, 0x37, 0x5b, 0xa1, 0xcf, 0xcd, 0x9d, 0xe6, 0x37, 0x4f, 0x6b, 0x85, 0xbf, 0x9f,
	0xd6, 0x0a, 0xec, 0x15, 0x08, 0xd6, 0x4c, 0x7e, 0x39, 0x23, 0x3f, 0xd7, 0x53, 0x7b, 0x1b, 0xc8,
	0x93, 0x53, 0x72, 0x5f, 0x55, 0xb0, 0x4c, 0xd0, 0x97, 0x23, 0xe4, 0x9b, 0x28, 0xbe, 0xae, 0xf1,
	0x59, 0xfb, 0xbe, 0x08, 0x96, 0xd9, 0x3d, 0x77, 0xa1, 0xe3, 0xfd, 0xdf, 0x2e, 0x91, 0x6f, 0x83,
	0x8d, 0xc7, 0x0e, 0x1d, 0x5a, 0x21, 0x7c, 0x0c, 0x5d, 0xb6, 0x4b, 0xf0, 0x43, 0xc2, 0xf5, 0xcc,
	0xd0, 0x5a, 0x9f, 0x60, 0x76, 0x39, 0xe4, 0x55, 0xb4, 0x41, 0x9a, 0xe3, 0x62, 0x96, 0x23, 0x9b,
	0x3e, 0x21, 0x32, 0x91, 0xb3, 0x87, 0x42, 0xa5, 0x34, 0x3d, 0x7d, 0x62, 0xcf, 0x9c, 0xe9, 0x13,
	0x43, 0xe4, 0x5e, 0xd2, 0x24, 0x4b, 0xe7, 0x35, 0x89, 0x3a, 0xb3, 0x49, 0xb2, 0x2f, 0x5e, 0x01,
	0x4b, 0x7b, 0x28, 0x24, 0x0e, 0xf6, 0x95, 0x65, 0x3e, 0xab, 0xe2, 0xa3, 0x7c, 0x15, 0x00, 0x42,
	0x21, 0x45, 0xd1, 0x20, 0x2b, 0x73, 0x67, 0x99, 0x5b, 0xf8, 0x1c, 0xbb, 0x06, 0x56, 0x08, 0xc5,
	0x21, 0xb4, 0x05, 0x00, 0x70, 0x40, 0x45, 0xd8, 0x38, 0xa4, 0x09, 0x36, 0x5c, 0x48, 0x11, 0xa1,
	0x62, 0xdc, 0x0d, 0x21, 0x19, 0x2a, 0x15, 0x8e, 0x5b, 0x8b, 0x1c, 0x7c, 0x8e, 0x7d, 0x00, 0xc9,
	0xb0, 0x53, 0x9f, 0xea, 0xac, 0xf5, 0xf4, 0x4e, 0x60, 0x8d, 0xa1, 0xc9, 0x7c, 0xa6, 0xf3, 0xbf,
	0x93, 0xab, 0xfc, 0x8b, 0x04, 0x56, 0x98, 0x31, 0x9e, 0x09, 0xf2, 0x87, 0xa0, 0x0c, 0x47, 0x74,
	0x88, 0x43, 0x87, 0x8e, 0xc5, 0x8b, 0xbc, 0x75, 0x76, 0x54, 0x5b, 0x17, 0x0a, 0xc4, 0xae, 0x7c,
	0xa1, 0x27, 0xe1, 0xf3, 0x3b, 0xb1, 0x09, 0x36, 0x0c, 0xe8, 0x42, 0xdf, 0x44, 0x03, 0x1a, 0x22,
	0x94, 0x9e, 0xf6, 0x6b, 0xc2, 0xf1, 0x20, 0x44, 0x5c, 0x87, 0xce, 0x5b, 0x7c, 0x85, 0x27, 0x89,
	0x19, 0xbd, 0xcd, 0x34, 0xbd, 0xb8, 0x7a, 0xed, 0x22, 0xd8, 0x4c, 0x9f, 0x13, 0x9a, 0x3f, 0x47,
	0xc3, 0xf9, 0x93, 0xc0, 0x82, 0x14, 0xed, 0xc2, 0x10, 0x7a, 0xe4, 0x95, 0x32, 0x6d, 0x83, 0x52,
	0xc0, 0xb3, 0x8a, 0xb5, 0xae, 0xce, 0x5a, 0xeb, 0xd1, 0x73, 0xfb, 0x02, 0x19, 0x2d, 0x9e, 0x2c,
	0xa9, 0xf4, 0x30, 0x4e, 0xd7, 0x2a, 0x86, 0x71, 0xda, 0x14, 0x53, 0x6b, 0xff, 0xb3, 0x08, 0x2e,
	0xf4, 0x88, 0x2d, 0x7f, 0x0e, 0x2a, 0xe9, 0x6f, 0x2d, 0x6d, 0x56, 0x05, 0xd9, 0x8f, 0x1b, 0xb5,
	0x79, 0x3e, 0x26, 0x19, 0x3f, 0x5f, 0x80, 0x95, 0xcc, 0xc7, 0xcf, 0x1b, 0x39, 0xb1, 0x69, 0x90,
	0x7a, 0xf3, 0x25, 0x40, 0xc9, 0x13, 0x4c, 0xb0, 0x9a, 0xfd, 0xde, 0xb8, 0x9e, 0x13, 0x9d, 0x41,
	0xa9, 0xb7, 0x5e, 0x06, 0x95, 0xa6, 0x91, 0xd9, 0xd0, 0x79, 0x34, 0xd2, 0xa0, 0x5c, 0x1a, 0xb3,
	0x96, 0xa3, 0xfc, 0x11, 0x58, 0x8a, 0x17, 0x63, 0x35, 0x37, 0x8e, 0xfb, 0xd5, 0x37, 0xe7, 0xfb,
	0x93, 0x94, 0xf7, 0xc0, 0x62, 0x34, 0xda, 0x5f, 0xcf, 0xd3, 0x93, 0x79, 0xd5, 0xeb, 0xf3, 0xbc,
	0x49, 0xb2, 0x4f, 0x41, 0x79, 0x72, 0xdb, 0xeb, 0x79, 0x21, 0x31, 0x42, 0x6d, 0x9c, 0x87, 0x48,
	0x4b, 0x9b, 0xb9, 0x5f, 0x79, 0xd2, 0xa6, 0x41, 0xb9, 0xd2, 0xce, 0x6a, 0x75, 0x75, 0xf1, 0x2b,
	0x36, 0x79, 0xbb, 0xf7, 0x0e, 0xff, 0xaa, 0x16, 0x0e, 0x8f, 0xab, 0xd2, 0xf3, 0xe3, 0xaa, 0xf4,
	0xe7, 0x71, 0x55, 0x7a, 0x72, 0x52, 0x2d, 0x3c, 0x3f, 0xa9, 0x16, 0x7e, 0x3f, 0xa9, 0x16, 0x3e,
	0xdb, 0x4a, 0xed, 0x6f, 0x96, 0xd8, 0x81, 0x5b, 0x2e, 0x34, 0x48, 0xeb, 0xfe, 0x2e, 0xff, 0xb5,
	0xb2, 0x9f, 0xfc, 0x5e, 0xe1, 0xab, 0xdc, 0x28, 0xf1, 0xcf, 0xc5, 0x77, 0xfe, 0x0d, 0x00, 0x00,
	0xff, 0xff, 0x7e, 0xc0, 0x1e, 0x9e, 0xb9, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RecordBatch defines a rpc handler method for MsgRecordBatch.
	RecordBatch(ctx context.Context, in *MsgRecordBatch, opts ...grpc.CallOption) (*MsgRecordBatchResponse, error)
	// CreateBridge defines a rpc handler method for MsgCreateBridge.
	CreateBridge(ctx context.Context, in *MsgCreateBridge, opts ...grpc.CallOption) (*MsgCreateBridgeResponse, error)
	// ProposeOutput defines a rpc handler method for MsgProposeOutput.
	ProposeOutput(ctx context.Context, in *MsgProposeOutput, opts ...grpc.CallOption) (*MsgProposeOutputResponse, error)
	// DeleteOutput defines a rpc handler method for MsgDeleteOutput.
	DeleteOutput(ctx context.Context, in *MsgDeleteOutput, opts ...grpc.CallOption) (*MsgDeleteOutputResponse, error)
	// Deposit defines a user facing l1 => l2 token transfer interface.
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	// Claim defines a user facing l2 => l1 token transfer interface.
	Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error)
	// Challenge defines a rpc handler method for MsgChallenge.
	Challenge(ctx context.Context, in *MsgChallenge, opts ...grpc.CallOption) (*MsgChallengeResponse, error)
	// UpdateParams defines an operation for updating the
	// x/rollup module parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RecordBatch(ctx context.Context, in *MsgRecordBatch, opts ...grpc.CallOption) (*MsgRecordBatchResponse, error) {
	out := new(MsgRecordBatchResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/RecordBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBridge(ctx context.Context, in *MsgCreateBridge, opts ...grpc.CallOption) (*MsgCreateBridgeResponse, error) {
	out := new(MsgCreateBridgeResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/CreateBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeOutput(ctx context.Context, in *MsgProposeOutput, opts ...grpc.CallOption) (*MsgProposeOutputResponse, error) {
	out := new(MsgProposeOutputResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/ProposeOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteOutput(ctx context.Context, in *MsgDeleteOutput, opts ...grpc.CallOption) (*MsgDeleteOutputResponse, error) {
	out := new(MsgDeleteOutputResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/DeleteOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Claim(ctx context.Context, in *MsgClaim, opts ...grpc.CallOption) (*MsgClaimResponse, error) {
	out := new(MsgClaimResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Challenge(ctx context.Context, in *MsgChallenge, opts ...grpc.CallOption) (*MsgChallengeResponse, error) {
	out := new(MsgChallengeResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/op_init.op_host.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RecordBatch defines a rpc handler method for MsgRecordBatch.
	RecordBatch(context.Context, *MsgRecordBatch) (*MsgRecordBatchResponse, error)
	// CreateBridge defines a rpc handler method for MsgCreateBridge.
	CreateBridge(context.Context, *MsgCreateBridge) (*MsgCreateBridgeResponse, error)
	// ProposeOutput defines a rpc handler method for MsgProposeOutput.
	ProposeOutput(context.Context, *MsgProposeOutput) (*MsgProposeOutputResponse, error)
	// DeleteOutput defines a rpc handler method for MsgDeleteOutput.
	DeleteOutput(context.Context, *MsgDeleteOutput) (*MsgDeleteOutputResponse, error)
	// Deposit defines a user facing l1 => l2 token transfer interface.
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	// Claim defines a user facing l2 => l1 token transfer interface.
	Claim(context.Context, *MsgClaim) (*MsgClaimResponse, error)
	// Challenge defines a rpc handler method for MsgChallenge.
	Challenge(context.Context, *MsgChallenge) (*MsgChallengeResponse, error)
	// UpdateParams defines an operation for updating the
	// x/rollup module parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RecordBatch(ctx context.Context, req *MsgRecordBatch) (*MsgRecordBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordBatch not implemented")
}
func (*UnimplementedMsgServer) CreateBridge(ctx context.Context, req *MsgCreateBridge) (*MsgCreateBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (*UnimplementedMsgServer) ProposeOutput(ctx context.Context, req *MsgProposeOutput) (*MsgProposeOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeOutput not implemented")
}
func (*UnimplementedMsgServer) DeleteOutput(ctx context.Context, req *MsgDeleteOutput) (*MsgDeleteOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutput not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedMsgServer) Claim(ctx context.Context, req *MsgClaim) (*MsgClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (*UnimplementedMsgServer) Challenge(ctx context.Context, req *MsgChallenge) (*MsgChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RecordBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecordBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/RecordBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecordBatch(ctx, req.(*MsgRecordBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBridge(ctx, req.(*MsgCreateBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/ProposeOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeOutput(ctx, req.(*MsgProposeOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/DeleteOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteOutput(ctx, req.(*MsgDeleteOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Claim(ctx, req.(*MsgClaim))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Challenge(ctx, req.(*MsgChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/op_init.op_host.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "op_init.op_host.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordBatch",
			Handler:    _Msg_RecordBatch_Handler,
		},
		{
			MethodName: "CreateBridge",
			Handler:    _Msg_CreateBridge_Handler,
		},
		{
			MethodName: "ProposeOutput",
			Handler:    _Msg_ProposeOutput_Handler,
		},
		{
			MethodName: "DeleteOutput",
			Handler:    _Msg_DeleteOutput_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Msg_Claim_Handler,
		},
		{
			MethodName: "Challenge",
			Handler:    _Msg_Challenge_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "op_init/op_host/v1/tx.proto",
}

func (m *MsgRecordBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchBytes) > 0 {
		i -= len(m.BatchBytes)
		copy(dAtA[i:], m.BatchBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BatchBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.L2BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.L2BlockTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.OutputRoot) > 0 {
		i -= len(m.OutputRoot)
		copy(dAtA[i:], m.OutputRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutputRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeOutputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeOutputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeOutputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOutputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOutputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOutputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestBlockHash) > 0 {
		i -= len(m.LatestBlockHash)
		copy(dAtA[i:], m.LatestBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LatestBlockHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StorageRoot) > 0 {
		i -= len(m.StorageRoot)
		copy(dAtA[i:], m.StorageRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorageRoot)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x28
	}
	if len(m.WithdrawalProofs) > 0 {
		for iNdEx := len(m.WithdrawalProofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawalProofs[iNdEx])
			copy(dAtA[i:], m.WithdrawalProofs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawalProofs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceTreeRoot) > 0 {
		i -= len(m.BalanceTreeRoot)
		copy(dAtA[i:], m.BalanceTreeRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BalanceTreeRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecordBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.BatchBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Config.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	return n
}

func (m *MsgProposeOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.OutputRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.L2BlockTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgProposeOutputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	return n
}

func (m *MsgDeleteOutputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	return n
}

func (m *MsgClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if len(m.WithdrawalProofs) > 0 {
		for _, b := range m.WithdrawalProofs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StorageRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.BalanceTreeRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecordBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchBytes = append(m.BatchBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchBytes == nil {
				m.BatchBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputRoot = append(m.OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputRoot == nil {
				m.OutputRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.L2BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeOutputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeOutputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeOutputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOutputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOutputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOutputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalProofs = append(m.WithdrawalProofs, make([]byte, postIndex-iNdEx))
			copy(m.WithdrawalProofs[len(m.WithdrawalProofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageRoot = append(m.StorageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StorageRoot == nil {
				m.StorageRoot = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceTreeRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceTreeRoot = append(m.BalanceTreeRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BalanceTreeRoot == nil {
				m.BalanceTreeRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
