// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opinit/opchild/v1/types.proto

package types

import (
	fmt "fmt"
	types2 "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of move parameters.
type Params struct {
	// max_validators is the maximum number of validators.
	MaxValidators uint32 `protobuf:"varint,1,opt,name=max_validators,json=maxValidators,proto3" json:"max_validators,omitempty" yaml:"max_validators"`
	// historical_entries is the number of historical entries to persist.
	HistoricalEntries uint32                                      `protobuf:"varint,2,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty" yaml:"historical_entries"`
	MinGasPrices      github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=min_gas_prices,json=minGasPrices,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"min_gas_prices" yaml:"min_gas_price"`
	// the account address of bridge executor who can execute permissioned bridge
	// messages.
	BridgeExecutor string `protobuf:"bytes,4,opt,name=bridge_executor,json=bridgeExecutor,proto3" json:"bridge_executor,omitempty" yaml:"bridge_executor"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc6df244b706d68, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type Validator struct {
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty" yaml:"moniker"`
	// operator_address defines the address of the validator's operator;
	// bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	// consensus_pubkey is the consensus public key of the validator,
	// as a Protobuf Any.
	ConsensusPubkey *types1.Any `protobuf:"bytes,3,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty" yaml:"consensus_pubkey"`
	ConsPower       int64       `protobuf:"varint,4,opt,name=cons_power,json=consPower,proto3" json:"cons_power,omitempty" yaml:"cons_power"`
}

func (m *Validator) Reset()      { *m = Validator{} }
func (*Validator) ProtoMessage() {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc6df244b706d68, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

// ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
// TODO: explore moving this to proto/cosmos/base to separate modules
// from tendermint dependence
type ValidatorUpdates struct {
	Updates []types2.ValidatorUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates"`
}

func (m *ValidatorUpdates) Reset()         { *m = ValidatorUpdates{} }
func (m *ValidatorUpdates) String() string { return proto.CompactTextString(m) }
func (*ValidatorUpdates) ProtoMessage()    {}
func (*ValidatorUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cc6df244b706d68, []int{2}
}
func (m *ValidatorUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorUpdates.Merge(m, src)
}
func (m *ValidatorUpdates) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorUpdates proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "opinit.opchild.v1.Params")
	proto.RegisterType((*Validator)(nil), "opinit.opchild.v1.Validator")
	proto.RegisterType((*ValidatorUpdates)(nil), "opinit.opchild.v1.ValidatorUpdates")
}

func init() { proto.RegisterFile("opinit/opchild/v1/types.proto", fileDescriptor_2cc6df244b706d68) }

var fileDescriptor_2cc6df244b706d68 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x54, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xb6, 0x9b, 0xaa, 0x55, 0xdc, 0x36, 0x6d, 0xac, 0xf4, 0xf7, 0x4b, 0x5b, 0x6a, 0x47, 0x9e,
	0xa2, 0x42, 0x6c, 0xa5, 0x45, 0x42, 0xca, 0x44, 0x0d, 0x85, 0xa1, 0x48, 0x8d, 0x8c, 0x60, 0x60,
	0x31, 0x67, 0xfb, 0x70, 0x4f, 0x8d, 0xef, 0x2c, 0xdf, 0x25, 0x24, 0xff, 0x01, 0x62, 0x81, 0x91,
	0xb1, 0x63, 0x61, 0xea, 0xc0, 0xc6, 0x3f, 0x50, 0x31, 0x55, 0x4c, 0x4c, 0x06, 0xd2, 0xa1, 0xcc,
	0xf9, 0x0b, 0x90, 0x7d, 0x97, 0xa4, 0x84, 0x25, 0xb9, 0xf7, 0xbe, 0xef, 0xbd, 0x7b, 0xfe, 0xee,
	0xbb, 0x53, 0xb6, 0x49, 0x8c, 0x30, 0x62, 0x16, 0x89, 0xfd, 0x63, 0xd4, 0x09, 0xac, 0x5e, 0xd3,
	0x62, 0x83, 0x18, 0x52, 0x33, 0x4e, 0x08, 0x23, 0x6a, 0x99, 0xc3, 0xa6, 0x80, 0xcd, 0x5e, 0x73,
	0xb3, 0x0c, 0x22, 0x84, 0x89, 0x95, 0xff, 0x72, 0xd6, 0xa6, 0xe6, 0x13, 0x1a, 0x11, 0x6a, 0x79,
	0x80, 0x42, 0xab, 0xd7, 0xf4, 0x20, 0x03, 0x4d, 0xcb, 0x27, 0x08, 0x0b, 0x7c, 0x83, 0xe3, 0x6e,
	0x1e, 0x59, 0x3c, 0x10, 0x50, 0x25, 0x24, 0x21, 0xe1, 0xf9, 0x6c, 0x35, 0x2e, 0x08, 0x09, 0x09,
	0x3b, 0xd0, 0xca, 0x23, 0xaf, 0xfb, 0xca, 0x02, 0x78, 0x20, 0xa0, 0x2d, 0x06, 0x71, 0x00, 0x93,
	0x08, 0x61, 0x66, 0x01, 0xcf, 0x47, 0x37, 0xc7, 0x35, 0x3e, 0x16, 0x94, 0x85, 0x36, 0x48, 0x40,
	0x44, 0xd5, 0xfb, 0x4a, 0x29, 0x02, 0x7d, 0xb7, 0x07, 0x3a, 0x28, 0x00, 0x8c, 0x24, 0xb4, 0x2a,
	0xd7, 0xe4, 0xfa, 0x8a, 0xbd, 0x31, 0x4a, 0xf5, 0xf5, 0x01, 0x88, 0x3a, 0x2d, 0xe3, 0x6f, 0xdc,
	0x70, 0x56, 0x22, 0xd0, 0x7f, 0x3e, 0x89, 0xd5, 0x27, 0x8a, 0x7a, 0x8c, 0x28, 0x23, 0x09, 0xf2,
	0x41, 0xc7, 0x85, 0x98, 0x25, 0x08, 0xd2, 0xea, 0x5c, 0xde, 0x65, 0x7b, 0x94, 0xea, 0x1b, 0xbc,
	0xcb, 0xbf, 0x1c, 0xc3, 0x29, 0x4f, 0x93, 0x07, 0x3c, 0xa7, 0xbe, 0x93, 0x95, 0x52, 0x84, 0xb0,
	0x1b, 0x82, 0x4c, 0x07, 0xe4, 0x43, 0x5a, 0x2d, 0xd4, 0x0a, 0xf5, 0xa5, 0xdd, 0x5b, 0xa6, 0x10,
	0x24, 0x53, 0xcf, 0x14, 0xea, 0x99, 0x0f, 0xa1, 0xff, 0x80, 0x20, 0x6c, 0x1f, 0x5e, 0xa4, 0xba,
	0x34, 0x4a, 0xf5, 0x8a, 0x18, 0xf9, 0x66, 0x07, 0xe3, 0xd3, 0x0f, 0xfd, 0x76, 0x88, 0xd8, 0x71,
	0xd7, 0x33, 0x7d, 0x12, 0x09, 0x61, 0xc5, 0x5f, 0x83, 0x06, 0x27, 0x42, 0x1b, 0xd1, 0x8b, 0x3a,
	0xcb, 0x11, 0xc2, 0x8f, 0x01, 0x6d, 0xe7, 0xdb, 0xab, 0x2f, 0x95, 0x55, 0x2f, 0x41, 0x41, 0x08,
	0x5d, 0xd8, 0x87, 0x7e, 0x97, 0x91, 0xa4, 0x3a, 0x5f, 0x93, 0xeb, 0x45, 0xfb, 0xde, 0x28, 0xd5,
	0xff, 0xe3, 0xfb, 0xcd, 0x10, 0x8c, 0x6f, 0x9f, 0x1b, 0x15, 0x31, 0xee, 0x7e, 0x10, 0x24, 0x90,
	0xd2, 0xa7, 0x2c, 0x41, 0x38, 0x3c, 0xbb, 0x3e, 0xdf, 0x91, 0x9d, 0x12, 0xa7, 0x1f, 0x08, 0x76,
	0x6b, 0xeb, 0xc3, 0xa9, 0x2e, 0xfd, 0x3e, 0xd5, 0xe5, 0xb7, 0xd7, 0xe7, 0x3b, 0xa5, 0xb1, 0xc5,
	0xf8, 0x01, 0x19, 0x5f, 0xe6, 0x94, 0xe2, 0x44, 0x6d, 0xf5, 0x8e, 0xb2, 0x18, 0x11, 0x8c, 0x4e,
	0x60, 0x92, 0x9f, 0x53, 0xd1, 0x56, 0x47, 0xa9, 0x5e, 0x12, 0x1f, 0xcd, 0x01, 0xc3, 0x19, 0x53,
	0xd4, 0x47, 0xca, 0x1a, 0x89, 0x61, 0x92, 0x55, 0xba, 0x80, 0xcf, 0x91, 0x1f, 0x4c, 0xd1, 0xde,
	0x1a, 0xa5, 0xfa, 0xff, 0xbc, 0x6c, 0x96, 0x61, 0x38, 0xab, 0xe3, 0x94, 0x98, 0x5d, 0x65, 0xca,
	0x9a, 0x4f, 0x30, 0x85, 0x98, 0x76, 0xa9, 0x1b, 0x77, 0xbd, 0x13, 0x38, 0xa8, 0x16, 0x6a, 0x72,
	0x7d, 0x69, 0xb7, 0x62, 0x72, 0x0b, 0x9a, 0x63, 0x0b, 0x9a, 0xfb, 0x78, 0x60, 0xef, 0x4d, 0xbb,
	0xcf, 0xd6, 0x19, 0x5f, 0xa7, 0xd2, 0xf8, 0xc9, 0x20, 0x66, 0xc4, 0x6c, 0x77, 0xbd, 0x43, 0x38,
	0x70, 0x56, 0x27, 0xd4, 0x76, 0xce, 0x54, 0xef, 0x2a, 0x4a, 0x96, 0x72, 0x63, 0xf2, 0x1a, 0x72,
	0xcd, 0x0b, 0xf6, 0xfa, 0x28, 0xd5, 0xcb, 0xd3, 0xce, 0x1c, 0x33, 0x9c, 0x62, 0x16, 0xb4, 0xb3,
	0x75, 0x6b, 0xf9, 0xcd, 0xa9, 0x2e, 0x09, 0x41, 0x25, 0xc3, 0x55, 0xd6, 0x26, 0xe2, 0x3d, 0x8b,
	0x03, 0xc0, 0x20, 0x55, 0x0f, 0x94, 0xc5, 0x2e, 0x5f, 0x56, 0xe5, 0xdc, 0x5a, 0x35, 0x73, 0x7a,
	0x59, 0xcc, 0xec, 0xb2, 0x98, 0x33, 0x35, 0x76, 0x31, 0xb3, 0x17, 0x3f, 0xbc, 0x71, 0x6d, 0x6b,
	0x3e, 0xdb, 0xc0, 0x3e, 0xba, 0xf8, 0xa5, 0x49, 0x67, 0x43, 0x4d, 0xbe, 0x18, 0x6a, 0xf2, 0xe5,
	0x50, 0x93, 0x7f, 0x0e, 0x35, 0xf9, 0xfd, 0x95, 0x26, 0x5d, 0x5e, 0x69, 0xd2, 0xf7, 0x2b, 0x4d,
	0x7a, 0xd1, 0xb8, 0x61, 0xbd, 0xec, 0x91, 0x40, 0xa0, 0xd1, 0x01, 0x1e, 0xb5, 0x8e, 0xda, 0xf9,
	0x8b, 0xd2, 0x9f, 0xbc, 0x29, 0xb9, 0x0b, 0xbd, 0x85, 0x5c, 0xc9, 0xbd, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x06, 0xae, 0x2b, 0x72, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxValidators != that1.MaxValidators {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	if len(this.MinGasPrices) != len(that1.MinGasPrices) {
		return false
	}
	for i := range this.MinGasPrices {
		if !this.MinGasPrices[i].Equal(&that1.MinGasPrices[i]) {
			return false
		}
	}
	if this.BridgeExecutor != that1.BridgeExecutor {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeExecutor) > 0 {
		i -= len(m.BridgeExecutor)
		copy(dAtA[i:], m.BridgeExecutor)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BridgeExecutor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MinGasPrices) > 0 {
		for iNdEx := len(m.MinGasPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinGasPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HistoricalEntries != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxValidators != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxValidators))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsPower != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ConsPower))
		i--
		dAtA[i] = 0x20
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxValidators != 0 {
		n += 1 + sovTypes(uint64(m.MaxValidators))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovTypes(uint64(m.HistoricalEntries))
	}
	if len(m.MinGasPrices) > 0 {
		for _, e := range m.MinGasPrices {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.BridgeExecutor)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConsPower != 0 {
		n += 1 + sovTypes(uint64(m.ConsPower))
	}
	return n
}

func (m *ValidatorUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			m.MaxValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidators |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGasPrices = append(m.MinGasPrices, types.DecCoin{})
			if err := m.MinGasPrices[len(m.MinGasPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeExecutor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeExecutor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types1.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsPower", wireType)
			}
			m.ConsPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, types2.ValidatorUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
