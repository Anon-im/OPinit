syntax = "proto3";
package op_init.op_host.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "op_init/op_host/v1/types.proto";

option go_package                      = "github.com/initia-labs/OPinit/x/op_host/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the rollup Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  ////////////////////////////
  // Batch Submitter Messages

  // RecordBatch defines a rpc handler method for MsgRecordBatch.
  rpc RecordBatch(MsgRecordBatch) returns (MsgRecordBatchResponse);

  ////////////////////////////
  // Bridge Creator Messages

  // CreateBridge defines a rpc handler method for MsgCreateBridge.
  rpc CreateBridge(MsgCreateBridge) returns (MsgCreateBridgeResponse);

  ////////////////////////////
  // Output Proposer Messages

  // ProposeOutput defines a rpc handler method for MsgProposeOutput.
  rpc ProposeOutput(MsgProposeOutput) returns (MsgProposeOutputResponse);

  ////////////////////////////
  // Challenger Messages

  // DeleteOutput defines a rpc handler method for MsgDeleteOutput.
  rpc DeleteOutput(MsgDeleteOutput) returns (MsgDeleteOutputResponse);

  ////////////////////////////
  // User Messages

  // Deposit defines a user facing l1 => l2 token transfer interface.
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);

  // Claim defines a user facing l2 => l1 token transfer interface.
  rpc Claim(MsgClaim) returns (MsgClaimResponse);

  ////////////////////////////
  // Authority Messages

  // Challenge defines a rpc handler method for MsgChallenge.
  rpc Challenge(MsgChallenge) returns (MsgChallengeResponse);

  // UpdateParams defines an operation for updating the
  // x/rollup module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

////////////////////////////
// Batch Submitter Messages

// MsgRecordBatch is no_op message, which is only for tx indexing.
message MsgRecordBatch {
  option (cosmos.msg.v1.signer) = "submitter";
  option (amino.name)           = "op_host/MsgRecordBatch";

  string submitter   = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 bridge_id   = 2;
  bytes  batch_bytes = 3;
}

// MsgRecordBatchResponse returns MsgRecordBatch message result data
message MsgRecordBatchResponse {}

////////////////////////////
// Bridge Creator Messages

// MsgCreateBridge is a message to register a new bridge with
// new bridge id.
message MsgCreateBridge {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name)           = "op_host/MsgCreateBridge";

  string       creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  BridgeConfig config  = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgCreateBridgeResponse returns MsgCreateBridge message
// result data
message MsgCreateBridgeResponse {
  uint64 bridge_id = 1;
}

////////////////////////////
// Output Proposer Messages

// MsgProposeOutput is a message to submit l2 block proposal.
message MsgProposeOutput {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name)           = "op_host/MsgProposeOutput";

  string proposer    = 1 [(gogoproto.moretags) = "yaml:\"proposer\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 bridge_id   = 2;
  bytes  output_root = 3;
  google.protobuf.Timestamp l2_block_time = 4
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgProposeOutputResponse returns deposit result data
message MsgProposeOutputResponse {}

////////////////////////////
// Challenger Messages

// MsgDeleteOutput is a message to delete unfinalized l2 output proposal.
message MsgDeleteOutput {
  option (cosmos.msg.v1.signer) = "challenger";
  option (amino.name)           = "op_host/MsgDeleteOutput";

  string challenger = 1 [(gogoproto.moretags) = "yaml:\"challenger\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 bridge_id  = 2;
  uint64 output_index = 3;
}

// MsgDeleteOutputResponse returns a message handle result.
message MsgDeleteOutputResponse {}

///////////////////////////
// Authority Messages

// MsgDeposit defines a SDK message for adding a new validator.
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "op_host/MsgDeposit";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   sender    = 1 [(gogoproto.moretags) = "yaml:\"sender\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64   bridge_id = 2;
  string   to        = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.moretags)     = "yaml:\"amount\"",
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  bytes data = 5 [(gogoproto.nullable) = true, (amino.dont_omitempty) = false];
}

// MsgDepositResponse returns a message handle result.
message MsgDepositResponse {
  uint64 sequence = 1;
}

// MsgClaim is a message to remove a validator from designated list
message MsgClaim {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "op_host/MsgClaim";

  // address of the sender of the transaction

  uint64         bridge_id         = 2;
  uint64         output_index      = 3;
  repeated bytes withdrawal_proofs = 4 [(gogoproto.nullable) = true, (amino.dont_omitempty) = false];

  // withdraw tx data

  string   sender   = 1 [(gogoproto.moretags) = "yaml:\"sender\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64   sequence = 5;
  string   receiver = 6 [(gogoproto.moretags) = "yaml:\"receiver\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin amount = 7
      [(gogoproto.moretags) = "yaml:\"amount\"", (gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // output root proofs

  bytes version           = 8;
  bytes state_root        = 9;
  bytes storage_root      = 10;
  bytes latest_block_hash = 11;
}

// MsgClaimResponse returns a message handle result.
message MsgClaimResponse {}

///////////////////////////
// Authority Messages

// MsgChallenge is a message to challenage
message MsgChallenge {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "op_host/MsgChallenge";

  // authority is the address that controls the module
  // (defaults to x/gov unless overwritten).
  string authority = 1 [(gogoproto.moretags) = "yaml:\"authority\"", (cosmos_proto.scalar) = "cosmos.AddressString"];
  uint64 bridge_id = 2;

  // the hash of balance tree for escaping.
  bytes balance_tree_root = 3;
}

// MsgChallengeResponse returns a message handle result.
message MsgChallengeResponse {}

// MsgUpdateParams is a message to update parameters
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "op_host/MsgUpdateParams";

  // authority is the address that controls the module
  // (defaults to x/gov unless overwritten).
  string authority = 1 [(gogoproto.moretags) = "yaml:\"authority\"", (cosmos_proto.scalar) = "cosmos.AddressString"];

  // params are the arbitrary parameters to be updated.
  Params params = 2;
}

// MsgUpdateParamsResponse returns a message handle result.
message MsgUpdateParamsResponse {}
